include "TriggerLibs/NativeLib"

include "Lib0C8FCC97_h"

//--------------------------------------------------------------------------------------------------
// Library: Library
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib0C8FCC97_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool lib0C8FCC97_InitVariables_completed = false;

void lib0C8FCC97_InitVariables () {
    int init_i;

    if (lib0C8FCC97_InitVariables_completed) {
        return;
    }

    lib0C8FCC97_InitVariables_completed = true;

    lib0C8FCC97_gv_get_PointFor_Structure = RegionRandomPoint(lib0C8FCC97_gf_getRight_RegionIn_CenterOf_Map());
    lib0C8FCC97_gv_get_GroupOf_Protoss = PlayerGroupEmpty();
    lib0C8FCC97_gv_get_GroupOf_Terran = PlayerGroupEmpty();
    lib0C8FCC97_gv_get_GroupOf_Zerg = PlayerGroupEmpty();
    lib0C8FCC97_gv_get_CountOf_Queens = 99;
    lib0C8FCC97_gv_get_CountOf_UnitsOf_MassAttack = 1;
    for (init_i = 0; init_i <= 17; init_i += 1) {
        lib0C8FCC97_gv_get_Dialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 17; init_i += 1) {
        lib0C8FCC97_gv_get_ImageOf_Unit[init_i] = c_invalidDialogControlId;
    }
    lib0C8FCC97_gv_get_SizeOf_Dialog = 125;
}

// Functions
point lib0C8FCC97_gf_gerRight_CenterOf_Map () {
    // Variable Declarations
    fixed lv_currentX;
    fixed lv_currentY;
    int lv_playersInGame;

    // Automatic Variable Declarations
    playergroup auto2926E9A8_g;
    int auto2926E9A8_var;

    // Variable Initialization

    // Implementation
    auto2926E9A8_g = PlayerGroupAll();
    auto2926E9A8_var = -1;
    while (true) {
        auto2926E9A8_var = PlayerGroupNextPlayer(auto2926E9A8_g, auto2926E9A8_var);
        if (auto2926E9A8_var < 0) { break; }
        if ((PlayerStatus(auto2926E9A8_var) == c_playerStatusActive)) {
            lv_currentX += PointGetX(PlayerStartLocation(auto2926E9A8_var));
            lv_currentY += PointGetY(PlayerStartLocation(auto2926E9A8_var));
            lv_playersInGame += 1;
        }

    }
    return Point((lv_currentX / lv_playersInGame), (lv_currentY / lv_playersInGame));
}

region lib0C8FCC97_gf_getRight_RegionIn_CenterOf_Map () {
    // Variable Declarations
    fixed lv__radius;
    region lv__region;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__radius = 5.0;
    lv__region = RegionEmpty();

    // Implementation
    lv__region = RegionCircle(lib0C8FCC97_gf_gerRight_CenterOf_Map(), lv__radius);
    return lv__region;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: MB | Change Race Of Player
//--------------------------------------------------------------------------------------------------
bool lib0C8FCC97_gt_MBChangeRaceOfPlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__structure;

    // Automatic Variable Declarations
    playergroup auto84713ECD_g;
    int auto84713ECD_var;
    string auto0C950921_val;
    string auto5B4C3DE1_val;
    unitgroup auto1677D576_g;
    int auto1677D576_u;
    unit auto1677D576_var;
    unitgroup auto1C4491D1_g;
    int auto1C4491D1_u;
    unit auto1C4491D1_var;
    unitgroup auto186C1D9B_g;
    int auto186C1D9B_u;
    unit auto186C1D9B_var;
    string auto44AC0BE5_val;
    unitgroup auto7FCC5C6A_g;
    int auto7FCC5C6A_u;
    unit auto7FCC5C6A_var;
    unitgroup auto81111D36_g;
    int auto81111D36_u;
    unit auto81111D36_var;
    unitgroup autoF56ECD3E_g;
    int autoF56ECD3E_u;
    unit autoF56ECD3E_var;
    string auto0B9D8711_val;
    unitgroup autoD0F05798_g;
    int autoD0F05798_u;
    unit autoD0F05798_var;
    unitgroup autoA50DED2D_g;
    int autoA50DED2D_u;
    unit autoA50DED2D_var;
    unitgroup auto3AEB2349_g;
    int auto3AEB2349_u;
    unit auto3AEB2349_var;
    string auto77B036F1_val;
    string autoFF595CE8_val;
    unitgroup auto6C641A36_g;
    int auto6C641A36_u;
    unit auto6C641A36_var;
    unitgroup auto0C99005F_g;
    int auto0C99005F_u;
    unit auto0C99005F_var;
    unitgroup auto10C007A7_g;
    int auto10C007A7_u;
    unit auto10C007A7_var;
    string auto671CCD35_val;
    unitgroup autoAA0503E9_g;
    int autoAA0503E9_u;
    unit autoAA0503E9_var;
    unitgroup auto9D86D57D_g;
    int auto9D86D57D_u;
    unit auto9D86D57D_var;
    unitgroup autoEA173BEB_g;
    int autoEA173BEB_u;
    unit autoEA173BEB_var;
    string auto3DB7E7D4_val;
    unitgroup auto5EFAD789_g;
    int auto5EFAD789_u;
    unit auto5EFAD789_var;
    unitgroup autoCBB83E8A_g;
    int autoCBB83E8A_u;
    unit autoCBB83E8A_var;
    unitgroup autoD63D01BC_g;
    int autoD63D01BC_u;
    unit autoD63D01BC_var;
    unitgroup auto7FFD3525_g;
    int auto7FFD3525_u;
    unit auto7FFD3525_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeGame);
    auto84713ECD_g = PlayerGroupActive();
    auto84713ECD_var = -1;
    while (true) {
        auto84713ECD_var = PlayerGroupNextPlayer(auto84713ECD_g, auto84713ECD_var);
        if (auto84713ECD_var < 0) { break; }
        if ((PlayerStatus(auto84713ECD_var) == c_playerStatusActive)) {
            auto0C950921_val = GameAttributeGameValue("2");
            if (auto0C950921_val == "0002") {
                libNtve_gf_CreateUnitsAtPoint2(1, "Pylon", c_unitCreateIgnorePlacement, auto84713ECD_var, lib0C8FCC97_gv_get_PointFor_Structure);
                lv__structure = UnitLastCreated();
                auto5B4C3DE1_val = PlayerRace(auto84713ECD_var);
                if (auto5B4C3DE1_val == "Prot") {
                    auto1677D576_g = UnitGroup("Nexus", auto84713ECD_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    auto1677D576_u = UnitGroupCount(auto1677D576_g, c_unitCountAll);
                    for (;; auto1677D576_u -= 1) {
                        auto1677D576_var = UnitGroupUnitFromEnd(auto1677D576_g, auto1677D576_u);
                        if (auto1677D576_var == null) { break; }
                        lib0C8FCC97_gv_get_Unit_ThatHaveDialog[auto84713ECD_var] = auto1677D576_var;
                    }
                }
                else if (auto5B4C3DE1_val == "Terr") {
                    auto1C4491D1_g = UnitGroup(null, auto84713ECD_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    auto1C4491D1_u = UnitGroupCount(auto1C4491D1_g, c_unitCountAll);
                    for (;; auto1C4491D1_u -= 1) {
                        auto1C4491D1_var = UnitGroupUnitFromEnd(auto1C4491D1_g, auto1C4491D1_u);
                        if (auto1C4491D1_var == null) { break; }
                        if ((UnitGetType(auto1C4491D1_var) != "Pylon")) {
                            UnitRemove(auto1C4491D1_var);
                        }

                    }
                    libNtve_gf_CreateUnitsAtPoint2(1, "Nexus", 0, auto84713ECD_var, PlayerStartLocation(auto84713ECD_var));
                    lib0C8FCC97_gv_get_Unit_ThatHaveDialog[auto84713ECD_var] = UnitLastCreated();
                    libNtve_gf_CreateUnitsAtPoint2(lib0C8FCC97_gv_get_CountOf_Workers, "Probe", 0, auto84713ECD_var, PlayerStartLocation(auto84713ECD_var));
                }
                else if (auto5B4C3DE1_val == "Zerg") {
                    auto186C1D9B_g = UnitGroup(null, auto84713ECD_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    auto186C1D9B_u = UnitGroupCount(auto186C1D9B_g, c_unitCountAll);
                    for (;; auto186C1D9B_u -= 1) {
                        auto186C1D9B_var = UnitGroupUnitFromEnd(auto186C1D9B_g, auto186C1D9B_u);
                        if (auto186C1D9B_var == null) { break; }
                        if ((UnitGetType(auto186C1D9B_var) != "Pylon")) {
                            UnitRemove(auto186C1D9B_var);
                        }

                    }
                    CreepModify(PlayerStartLocation(auto84713ECD_var), 15.0, false, false);
                    libNtve_gf_CreateUnitsAtPoint2(1, "Nexus", 0, auto84713ECD_var, PlayerStartLocation(auto84713ECD_var));
                    lib0C8FCC97_gv_get_Unit_ThatHaveDialog[auto84713ECD_var] = UnitLastCreated();
                    libNtve_gf_CreateUnitsAtPoint2(lib0C8FCC97_gv_get_CountOf_Workers, "Probe", 0, auto84713ECD_var, PlayerStartLocation(auto84713ECD_var));
                }
                else {
                }
                UnitRemove(lv__structure);
            }
            else if (auto0C950921_val == "0003") {
                libNtve_gf_CreateUnitsAtPoint2(1, "SupplyDepot", c_unitCreateIgnorePlacement, auto84713ECD_var, lib0C8FCC97_gv_get_PointFor_Structure);
                lv__structure = UnitLastCreated();
                auto44AC0BE5_val = PlayerRace(auto84713ECD_var);
                if (auto44AC0BE5_val == "Terr") {
                    auto7FCC5C6A_g = UnitGroup("CommandCenter", auto84713ECD_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    auto7FCC5C6A_u = UnitGroupCount(auto7FCC5C6A_g, c_unitCountAll);
                    for (;; auto7FCC5C6A_u -= 1) {
                        auto7FCC5C6A_var = UnitGroupUnitFromEnd(auto7FCC5C6A_g, auto7FCC5C6A_u);
                        if (auto7FCC5C6A_var == null) { break; }
                        lib0C8FCC97_gv_get_Unit_ThatHaveDialog[auto84713ECD_var] = auto7FCC5C6A_var;
                    }
                }
                else if (auto44AC0BE5_val == "Prot") {
                    auto81111D36_g = UnitGroup(null, auto84713ECD_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    auto81111D36_u = UnitGroupCount(auto81111D36_g, c_unitCountAll);
                    for (;; auto81111D36_u -= 1) {
                        auto81111D36_var = UnitGroupUnitFromEnd(auto81111D36_g, auto81111D36_u);
                        if (auto81111D36_var == null) { break; }
                        if ((UnitGetType(auto81111D36_var) != "SupplyDepot")) {
                            UnitRemove(auto81111D36_var);
                        }

                    }
                    libNtve_gf_CreateUnitsAtPoint2(1, "CommandCenter", 0, auto84713ECD_var, PlayerStartLocation(auto84713ECD_var));
                    lib0C8FCC97_gv_get_Unit_ThatHaveDialog[auto84713ECD_var] = UnitLastCreated();
                    libNtve_gf_CreateUnitsAtPoint2(lib0C8FCC97_gv_get_CountOf_Workers, "SCV", 0, auto84713ECD_var, PlayerStartLocation(auto84713ECD_var));
                }
                else if (auto44AC0BE5_val == "Zerg") {
                    autoF56ECD3E_g = UnitGroup(null, auto84713ECD_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    autoF56ECD3E_u = UnitGroupCount(autoF56ECD3E_g, c_unitCountAll);
                    for (;; autoF56ECD3E_u -= 1) {
                        autoF56ECD3E_var = UnitGroupUnitFromEnd(autoF56ECD3E_g, autoF56ECD3E_u);
                        if (autoF56ECD3E_var == null) { break; }
                        if ((UnitGetType(autoF56ECD3E_var) != "SupplyDepot")) {
                            UnitRemove(autoF56ECD3E_var);
                        }

                    }
                    CreepModify(PlayerStartLocation(auto84713ECD_var), 15.0, false, false);
                    libNtve_gf_CreateUnitsAtPoint2(1, "CommandCenter", 0, auto84713ECD_var, PlayerStartLocation(auto84713ECD_var));
                    lib0C8FCC97_gv_get_Unit_ThatHaveDialog[auto84713ECD_var] = UnitLastCreated();
                    libNtve_gf_CreateUnitsAtPoint2(lib0C8FCC97_gv_get_CountOf_Workers, "SCV", 0, auto84713ECD_var, PlayerStartLocation(auto84713ECD_var));
                }
                else {
                }
                UnitRemove(lv__structure);
            }
            else if (auto0C950921_val == "0004") {
                libNtve_gf_CreateUnitsAtPoint2(1, "SporeCrawlerUprooted", c_unitCreateIgnorePlacement, auto84713ECD_var, lib0C8FCC97_gv_get_PointFor_Structure);
                lv__structure = UnitLastCreated();
                auto0B9D8711_val = PlayerRace(auto84713ECD_var);
                if (auto0B9D8711_val == "Zerg") {
                    autoD0F05798_g = UnitGroup("Hatchery", auto84713ECD_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    autoD0F05798_u = UnitGroupCount(autoD0F05798_g, c_unitCountAll);
                    for (;; autoD0F05798_u -= 1) {
                        autoD0F05798_var = UnitGroupUnitFromEnd(autoD0F05798_g, autoD0F05798_u);
                        if (autoD0F05798_var == null) { break; }
                        lib0C8FCC97_gv_get_Unit_ThatHaveDialog[auto84713ECD_var] = autoD0F05798_var;
                    }
                }
                else if (auto0B9D8711_val == "Prot") {
                    autoA50DED2D_g = UnitGroup(null, auto84713ECD_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    autoA50DED2D_u = UnitGroupCount(autoA50DED2D_g, c_unitCountAll);
                    for (;; autoA50DED2D_u -= 1) {
                        autoA50DED2D_var = UnitGroupUnitFromEnd(autoA50DED2D_g, autoA50DED2D_u);
                        if (autoA50DED2D_var == null) { break; }
                        if ((UnitGetType(autoA50DED2D_var) != "SporeCrawlerUprooted")) {
                            UnitRemove(autoA50DED2D_var);
                        }

                    }
                    libNtve_gf_CreateUnitsAtPoint2(1, "Hatchery", 0, auto84713ECD_var, PlayerStartLocation(auto84713ECD_var));
                    lib0C8FCC97_gv_get_Unit_ThatHaveDialog[auto84713ECD_var] = UnitLastCreated();
                    libNtve_gf_CreateUnitsAtPoint2(lib0C8FCC97_gv_get_CountOf_Workers, "Drone", 0, auto84713ECD_var, PlayerStartLocation(auto84713ECD_var));
                    libNtve_gf_CreateUnitsAtPoint2(1, "Overlord", 0, auto84713ECD_var, PlayerStartLocation(auto84713ECD_var));
                }
                else if (auto0B9D8711_val == "Terr") {
                    auto3AEB2349_g = UnitGroup(null, auto84713ECD_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    auto3AEB2349_u = UnitGroupCount(auto3AEB2349_g, c_unitCountAll);
                    for (;; auto3AEB2349_u -= 1) {
                        auto3AEB2349_var = UnitGroupUnitFromEnd(auto3AEB2349_g, auto3AEB2349_u);
                        if (auto3AEB2349_var == null) { break; }
                        if ((UnitGetType(auto3AEB2349_var) != "SporeCrawlerUprooted")) {
                            UnitRemove(auto3AEB2349_var);
                        }

                    }
                    libNtve_gf_CreateUnitsAtPoint2(1, "Hatchery", 0, auto84713ECD_var, PlayerStartLocation(auto84713ECD_var));
                    lib0C8FCC97_gv_get_Unit_ThatHaveDialog[auto84713ECD_var] = UnitLastCreated();
                    libNtve_gf_CreateUnitsAtPoint2(lib0C8FCC97_gv_get_CountOf_Workers, "Drone", 0, auto84713ECD_var, PlayerStartLocation(auto84713ECD_var));
                    libNtve_gf_CreateUnitsAtPoint2(1, "Overlord", 0, auto84713ECD_var, PlayerStartLocation(auto84713ECD_var));
                }
                else {
                }
                UnitRemove(lv__structure);
            }
            else if (auto0C950921_val == "0001") {
                auto77B036F1_val = GameAttributePlayerValue("3", auto84713ECD_var);
                if (auto77B036F1_val == "0001") {
                    libNtve_gf_CreateUnitsAtPoint2(1, "Pylon", c_unitCreateIgnorePlacement, auto84713ECD_var, lib0C8FCC97_gv_get_PointFor_Structure);
                    lv__structure = UnitLastCreated();
                    autoFF595CE8_val = PlayerRace(auto84713ECD_var);
                    if (autoFF595CE8_val == "Prot") {
                        auto6C641A36_g = UnitGroup("Nexus", auto84713ECD_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                        auto6C641A36_u = UnitGroupCount(auto6C641A36_g, c_unitCountAll);
                        for (;; auto6C641A36_u -= 1) {
                            auto6C641A36_var = UnitGroupUnitFromEnd(auto6C641A36_g, auto6C641A36_u);
                            if (auto6C641A36_var == null) { break; }
                            lib0C8FCC97_gv_get_Unit_ThatHaveDialog[auto84713ECD_var] = auto6C641A36_var;
                        }
                    }
                    else if (autoFF595CE8_val == "Terr") {
                        auto0C99005F_g = UnitGroup(null, auto84713ECD_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                        auto0C99005F_u = UnitGroupCount(auto0C99005F_g, c_unitCountAll);
                        for (;; auto0C99005F_u -= 1) {
                            auto0C99005F_var = UnitGroupUnitFromEnd(auto0C99005F_g, auto0C99005F_u);
                            if (auto0C99005F_var == null) { break; }
                            if ((UnitGetType(auto0C99005F_var) != "Pylon")) {
                                UnitRemove(auto0C99005F_var);
                            }

                        }
                        libNtve_gf_CreateUnitsAtPoint2(1, "Nexus", 0, auto84713ECD_var, PlayerStartLocation(auto84713ECD_var));
                        lib0C8FCC97_gv_get_Unit_ThatHaveDialog[auto84713ECD_var] = UnitLastCreated();
                        libNtve_gf_CreateUnitsAtPoint2(lib0C8FCC97_gv_get_CountOf_Workers, "Probe", 0, auto84713ECD_var, PlayerStartLocation(auto84713ECD_var));
                    }
                    else if (autoFF595CE8_val == "Zerg") {
                        auto10C007A7_g = UnitGroup(null, auto84713ECD_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                        auto10C007A7_u = UnitGroupCount(auto10C007A7_g, c_unitCountAll);
                        for (;; auto10C007A7_u -= 1) {
                            auto10C007A7_var = UnitGroupUnitFromEnd(auto10C007A7_g, auto10C007A7_u);
                            if (auto10C007A7_var == null) { break; }
                            if ((UnitGetType(auto10C007A7_var) != "Pylon")) {
                                UnitRemove(auto10C007A7_var);
                            }

                        }
                        CreepModify(PlayerStartLocation(auto84713ECD_var), 15.0, false, false);
                        libNtve_gf_CreateUnitsAtPoint2(1, "Nexus", 0, auto84713ECD_var, PlayerStartLocation(auto84713ECD_var));
                        lib0C8FCC97_gv_get_Unit_ThatHaveDialog[auto84713ECD_var] = UnitLastCreated();
                        libNtve_gf_CreateUnitsAtPoint2(lib0C8FCC97_gv_get_CountOf_Workers, "Probe", 0, auto84713ECD_var, PlayerStartLocation(auto84713ECD_var));
                    }
                    else {
                    }
                    UnitRemove(lv__structure);
                }
                else if (auto77B036F1_val == "0002") {
                    libNtve_gf_CreateUnitsAtPoint2(1, "SupplyDepot", c_unitCreateIgnorePlacement, auto84713ECD_var, lib0C8FCC97_gv_get_PointFor_Structure);
                    lv__structure = UnitLastCreated();
                    auto671CCD35_val = PlayerRace(auto84713ECD_var);
                    if (auto671CCD35_val == "Terr") {
                        autoAA0503E9_g = UnitGroup("CommandCenter", auto84713ECD_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                        autoAA0503E9_u = UnitGroupCount(autoAA0503E9_g, c_unitCountAll);
                        for (;; autoAA0503E9_u -= 1) {
                            autoAA0503E9_var = UnitGroupUnitFromEnd(autoAA0503E9_g, autoAA0503E9_u);
                            if (autoAA0503E9_var == null) { break; }
                            lib0C8FCC97_gv_get_Unit_ThatHaveDialog[auto84713ECD_var] = autoAA0503E9_var;
                        }
                    }
                    else if (auto671CCD35_val == "Prot") {
                        auto9D86D57D_g = UnitGroup(null, auto84713ECD_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                        auto9D86D57D_u = UnitGroupCount(auto9D86D57D_g, c_unitCountAll);
                        for (;; auto9D86D57D_u -= 1) {
                            auto9D86D57D_var = UnitGroupUnitFromEnd(auto9D86D57D_g, auto9D86D57D_u);
                            if (auto9D86D57D_var == null) { break; }
                            if ((UnitGetType(auto9D86D57D_var) != "SupplyDepot")) {
                                UnitRemove(auto9D86D57D_var);
                            }

                        }
                        libNtve_gf_CreateUnitsAtPoint2(1, "CommandCenter", 0, auto84713ECD_var, PlayerStartLocation(auto84713ECD_var));
                        lib0C8FCC97_gv_get_Unit_ThatHaveDialog[auto84713ECD_var] = UnitLastCreated();
                        libNtve_gf_CreateUnitsAtPoint2(lib0C8FCC97_gv_get_CountOf_Workers, "SCV", 0, auto84713ECD_var, PlayerStartLocation(auto84713ECD_var));
                    }
                    else if (auto671CCD35_val == "Zerg") {
                        autoEA173BEB_g = UnitGroup(null, auto84713ECD_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                        autoEA173BEB_u = UnitGroupCount(autoEA173BEB_g, c_unitCountAll);
                        for (;; autoEA173BEB_u -= 1) {
                            autoEA173BEB_var = UnitGroupUnitFromEnd(autoEA173BEB_g, autoEA173BEB_u);
                            if (autoEA173BEB_var == null) { break; }
                            if ((UnitGetType(autoEA173BEB_var) != "SupplyDepot")) {
                                UnitRemove(autoEA173BEB_var);
                            }

                        }
                        CreepModify(PlayerStartLocation(auto84713ECD_var), 15.0, false, false);
                        libNtve_gf_CreateUnitsAtPoint2(1, "CommandCenter", 0, auto84713ECD_var, PlayerStartLocation(auto84713ECD_var));
                        lib0C8FCC97_gv_get_Unit_ThatHaveDialog[auto84713ECD_var] = UnitLastCreated();
                        libNtve_gf_CreateUnitsAtPoint2(lib0C8FCC97_gv_get_CountOf_Workers, "SCV", 0, auto84713ECD_var, PlayerStartLocation(auto84713ECD_var));
                    }
                    else {
                    }
                    UnitRemove(lv__structure);
                }
                else if (auto77B036F1_val == "0003") {
                    libNtve_gf_CreateUnitsAtPoint2(1, "SporeCrawlerUprooted", c_unitCreateIgnorePlacement, auto84713ECD_var, lib0C8FCC97_gv_get_PointFor_Structure);
                    lv__structure = UnitLastCreated();
                    auto3DB7E7D4_val = PlayerRace(auto84713ECD_var);
                    if (auto3DB7E7D4_val == "Zerg") {
                        auto5EFAD789_g = UnitGroup("Hatchery", auto84713ECD_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                        auto5EFAD789_u = UnitGroupCount(auto5EFAD789_g, c_unitCountAll);
                        for (;; auto5EFAD789_u -= 1) {
                            auto5EFAD789_var = UnitGroupUnitFromEnd(auto5EFAD789_g, auto5EFAD789_u);
                            if (auto5EFAD789_var == null) { break; }
                            lib0C8FCC97_gv_get_Unit_ThatHaveDialog[auto84713ECD_var] = auto5EFAD789_var;
                        }
                    }
                    else if (auto3DB7E7D4_val == "Prot") {
                        autoCBB83E8A_g = UnitGroup(null, auto84713ECD_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                        autoCBB83E8A_u = UnitGroupCount(autoCBB83E8A_g, c_unitCountAll);
                        for (;; autoCBB83E8A_u -= 1) {
                            autoCBB83E8A_var = UnitGroupUnitFromEnd(autoCBB83E8A_g, autoCBB83E8A_u);
                            if (autoCBB83E8A_var == null) { break; }
                            if ((UnitGetType(autoCBB83E8A_var) != "SporeCrawlerUprooted")) {
                                UnitRemove(autoCBB83E8A_var);
                            }

                        }
                        libNtve_gf_CreateUnitsAtPoint2(1, "Hatchery", 0, auto84713ECD_var, PlayerStartLocation(auto84713ECD_var));
                        lib0C8FCC97_gv_get_Unit_ThatHaveDialog[auto84713ECD_var] = UnitLastCreated();
                        libNtve_gf_CreateUnitsAtPoint2(lib0C8FCC97_gv_get_CountOf_Workers, "Drone", 0, auto84713ECD_var, PlayerStartLocation(auto84713ECD_var));
                        libNtve_gf_CreateUnitsAtPoint2(1, "Overlord", 0, auto84713ECD_var, PlayerStartLocation(auto84713ECD_var));
                    }
                    else if (auto3DB7E7D4_val == "Terr") {
                        autoD63D01BC_g = UnitGroup(null, auto84713ECD_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                        autoD63D01BC_u = UnitGroupCount(autoD63D01BC_g, c_unitCountAll);
                        for (;; autoD63D01BC_u -= 1) {
                            autoD63D01BC_var = UnitGroupUnitFromEnd(autoD63D01BC_g, autoD63D01BC_u);
                            if (autoD63D01BC_var == null) { break; }
                            if ((UnitGetType(autoD63D01BC_var) != "SporeCrawlerUprooted")) {
                                UnitRemove(autoD63D01BC_var);
                            }

                        }
                        libNtve_gf_CreateUnitsAtPoint2(1, "Hatchery", 0, auto84713ECD_var, PlayerStartLocation(auto84713ECD_var));
                        lib0C8FCC97_gv_get_Unit_ThatHaveDialog[auto84713ECD_var] = UnitLastCreated();
                        libNtve_gf_CreateUnitsAtPoint2(lib0C8FCC97_gv_get_CountOf_Workers, "Drone", 0, auto84713ECD_var, PlayerStartLocation(auto84713ECD_var));
                        libNtve_gf_CreateUnitsAtPoint2(1, "Overlord", 0, auto84713ECD_var, PlayerStartLocation(auto84713ECD_var));
                    }
                    else {
                    }
                    UnitRemove(lv__structure);
                }
                else {
                }
            }
            else {
            }
            auto7FFD3525_g = UnitGroup("Broodling", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
            auto7FFD3525_u = UnitGroupCount(auto7FFD3525_g, c_unitCountAll);
            for (;; auto7FFD3525_u -= 1) {
                auto7FFD3525_var = UnitGroupUnitFromEnd(auto7FFD3525_g, auto7FFD3525_u);
                if (auto7FFD3525_var == null) { break; }
                UnitRemove(auto7FFD3525_var);
            }
        }

    }
    TriggerExecute(lib0C8FCC97_gt_MBInitialization, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib0C8FCC97_gt_MBChangeRaceOfPlayer_Init () {
    lib0C8FCC97_gt_MBChangeRaceOfPlayer = TriggerCreate("lib0C8FCC97_gt_MBChangeRaceOfPlayer_Func");
    TriggerAddEventMapInit(lib0C8FCC97_gt_MBChangeRaceOfPlayer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MB | Initialization
//--------------------------------------------------------------------------------------------------
bool lib0C8FCC97_gt_MBInitialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto3D871C15_g;
    int auto3D871C15_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto3D871C15_g = PlayerGroupActive();
    auto3D871C15_var = -1;
    while (true) {
        auto3D871C15_var = PlayerGroupNextPlayer(auto3D871C15_g, auto3D871C15_var);
        if (auto3D871C15_var < 0) { break; }
        TechTreeUnitAllow(auto3D871C15_var, "Zealot", false);
        TechTreeUnitAllow(auto3D871C15_var, "Adept", false);
        TechTreeUnitAllow(auto3D871C15_var, "Sentry", false);
        TechTreeUnitAllow(auto3D871C15_var, "Stalker", false);
        TechTreeUnitAllow(auto3D871C15_var, "DarkTemplar", false);
        TechTreeUnitAllow(auto3D871C15_var, "Archon", false);
        TechTreeUnitAllow(auto3D871C15_var, "HighTemplarSkinPreview", false);
        TechTreeUnitAllow(auto3D871C15_var, "Immortal", false);
        TechTreeUnitAllow(auto3D871C15_var, "Colossus", false);
        TechTreeUnitAllow(auto3D871C15_var, "Disruptor", false);
        TechTreeUnitAllow(auto3D871C15_var, "Phoenix", false);
        TechTreeUnitAllow(auto3D871C15_var, "VoidRay", false);
        TechTreeUnitAllow(auto3D871C15_var, "Carrier", false);
        TechTreeUnitAllow(auto3D871C15_var, "Tempest", false);
        TechTreeUnitAllow(auto3D871C15_var, "Marine", false);
        TechTreeUnitAllow(auto3D871C15_var, "Reaper", false);
        TechTreeUnitAllow(auto3D871C15_var, "Marauder", false);
        TechTreeUnitAllow(auto3D871C15_var, "Hellion", false);
        TechTreeUnitAllow(auto3D871C15_var, "HellionTank", false);
        TechTreeUnitAllow(auto3D871C15_var, "WidowMine", false);
        TechTreeUnitAllow(auto3D871C15_var, "WidowMineBurrowed", false);
        TechTreeUnitAllow(auto3D871C15_var, "SiegeTankSkinPreview", false);
        TechTreeUnitAllow(auto3D871C15_var, "SiegeTank", false);
        TechTreeUnitAllow(auto3D871C15_var, "SiegeTankSieged", false);
        TechTreeUnitAllow(auto3D871C15_var, "Cyclone", false);
        TechTreeUnitAllow(auto3D871C15_var, "ThorAP", false);
        TechTreeUnitAllow(auto3D871C15_var, "Thor", false);
        TechTreeUnitAllow(auto3D871C15_var, "ThorACGluescreenDummy", false);
        TechTreeUnitAllow(auto3D871C15_var, "Viking", false);
        TechTreeUnitAllow(auto3D871C15_var, "VikingFighter", false);
        TechTreeUnitAllow(auto3D871C15_var, "VikingAssault", false);
        TechTreeUnitAllow(auto3D871C15_var, "LiberatorSkinPreview", false);
        TechTreeUnitAllow(auto3D871C15_var, "Liberator", false);
        TechTreeUnitAllow(auto3D871C15_var, "LiberatorAG", false);
        TechTreeUnitAllow(auto3D871C15_var, "Battlecruiser", false);
        TechTreeUnitAllow(auto3D871C15_var, "Banshee", false);
        TechTreeUnitAllow(auto3D871C15_var, "Zergling", false);
        TechTreeUnitAllow(auto3D871C15_var, "ZerglingBurrowed", false);
        TechTreeUnitAllow(auto3D871C15_var, "Baneling", false);
        TechTreeUnitAllow(auto3D871C15_var, "BanelingBurrowed", false);
        TechTreeUnitAllow(auto3D871C15_var, "BanelingCocoon", false);
        TechTreeUnitAllow(auto3D871C15_var, "Roach", false);
        TechTreeUnitAllow(auto3D871C15_var, "RoachBurrowed", false);
        TechTreeUnitAllow(auto3D871C15_var, "Ravager", false);
        TechTreeUnitAllow(auto3D871C15_var, "RavagerBurrowed", false);
        TechTreeUnitAllow(auto3D871C15_var, "RavagerCocoon", false);
        TechTreeUnitAllow(auto3D871C15_var, "Hydralisk", false);
        TechTreeUnitAllow(auto3D871C15_var, "HydraliskBurrowed", false);
        TechTreeUnitAllow(auto3D871C15_var, "LurkerMP", false);
        TechTreeUnitAllow(auto3D871C15_var, "LurkerMPBurrowed", false);
        TechTreeUnitAllow(auto3D871C15_var, "LurkerMPEgg", false);
        TechTreeUnitAllow(auto3D871C15_var, "Mutalisk", false);
        TechTreeUnitAllow(auto3D871C15_var, "Corruptor", false);
        TechTreeUnitAllow(auto3D871C15_var, "SwarmHostMP", false);
        TechTreeUnitAllow(auto3D871C15_var, "SwarmHostBurrowedMP", false);
        TechTreeUnitAllow(auto3D871C15_var, "LocustMP", false);
        TechTreeUnitAllow(auto3D871C15_var, "LocustMPFlying", false);
        TechTreeUnitAllow(auto3D871C15_var, "Ultralisk", false);
        TechTreeUnitAllow(auto3D871C15_var, "UltraliskBurrowed", false);
        TechTreeUnitAllow(auto3D871C15_var, "BroodLord", false);
        TechTreeUnitAllow(auto3D871C15_var, "BroodLordCocoon", false);
        TechTreeUnitAllow(auto3D871C15_var, "Broodling", false);
    }
    TriggerExecute(lib0C8FCC97_gt_MBLaunch, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib0C8FCC97_gt_MBInitialization_Init () {
    lib0C8FCC97_gt_MBInitialization = TriggerCreate("lib0C8FCC97_gt_MBInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MB | Launch
//--------------------------------------------------------------------------------------------------
bool lib0C8FCC97_gt_MBLaunch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoEAAAA26F_g;
    int autoEAAAA26F_var;
    playergroup autoC4E7AE6E_g;
    int autoC4E7AE6E_var;
    playergroup autoE52472CC_g;
    int autoE52472CC_var;
    playergroup auto119D3E16_g;
    int auto119D3E16_var;
    playergroup auto5590860B_g;
    int auto5590860B_var;
    playergroup auto04F7E128_g;
    int auto04F7E128_var;
    playergroup autoA22AA4AA_g;
    int autoA22AA4AA_var;
    playergroup auto86310458_g;
    int auto86310458_var;
    string autoA74D8B78_val;
    playergroup autoA64B5F51_g;
    int autoA64B5F51_var;
    string auto62C4E680_val;
    playergroup auto2C5D15F0_g;
    int auto2C5D15F0_var;
    string auto254173DD_val;
    playergroup autoFBF5FCBD_g;
    int autoFBF5FCBD_var;
    string auto13474EC6_val;
    playergroup auto0001DED5_g;
    int auto0001DED5_var;
    string auto97642312_val;
    string auto590FED81_val;
    string auto4B5E1035_val;
    string autoF66B114C_val;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameAttributeGameValue("15") == "0003")) {
        lib0C8FCC97_gv_get_CountOf_Queens = 10;
        lib0C8FCC97_gv_get_CountOf_Queens_true = true;
    }
    else {
        if ((GameAttributeGameValue("15") == "0002")) {
            lib0C8FCC97_gv_get_CountOf_Queens = 5;
            lib0C8FCC97_gv_get_CountOf_Queens_true = true;
        }
        else {
            if ((GameAttributeGameValue("15") == "0001")) {
                lib0C8FCC97_gv_get_CountOf_Queens = 3;
                lib0C8FCC97_gv_get_CountOf_Queens_true = true;
            }

        }
    }
    if ((GameAttributeGameValue("11") == "0002")) {
        autoEAAAA26F_g = PlayerGroupActive();
        autoEAAAA26F_var = -1;
        while (true) {
            autoEAAAA26F_var = PlayerGroupNextPlayer(autoEAAAA26F_g, autoEAAAA26F_var);
            if (autoEAAAA26F_var < 0) { break; }
            TechTreeAbilityAllow(autoEAAAA26F_var, AbilityCommand("TransportMode", 0), false);
            TechTreeAbilityAllow(autoEAAAA26F_var, AbilityCommand("TransportMode", 1), false);
            TechTreeAbilityAllow(autoEAAAA26F_var, AbilityCommand("WarpPrismTransport", 2), false);
            TechTreeAbilityAllow(autoEAAAA26F_var, AbilityCommand("WarpPrismTransport", 1), false);
            TechTreeAbilityAllow(autoEAAAA26F_var, AbilityCommand("WarpPrismTransport", 0), false);
            TechTreeAbilityAllow(autoEAAAA26F_var, AbilityCommand("MedivacTransport", 2), false);
            TechTreeAbilityAllow(autoEAAAA26F_var, AbilityCommand("MedivacTransport", 0), false);
            TechTreeAbilityAllow(autoEAAAA26F_var, AbilityCommand("OverlordTransport", 2), false);
            TechTreeAbilityAllow(autoEAAAA26F_var, AbilityCommand("OverlordTransport", 0), false);
        }
    }
    else {
        if ((GameAttributeGameValue("11") == "0003")) {
            autoC4E7AE6E_g = PlayerGroupActive();
            autoC4E7AE6E_var = -1;
            while (true) {
                autoC4E7AE6E_var = PlayerGroupNextPlayer(autoC4E7AE6E_g, autoC4E7AE6E_var);
                if (autoC4E7AE6E_var < 0) { break; }
                TechTreeUnitAllow(autoC4E7AE6E_var, "WarpPrismPhasing", false);
                TechTreeUnitAllow(autoC4E7AE6E_var, "WarpPrismSkinPreview", false);
                TechTreeUnitAllow(autoC4E7AE6E_var, "WarpPrism", false);
                TechTreeUnitAllow(autoC4E7AE6E_var, "Medivac", false);
                TechTreeAbilityAllow(autoC4E7AE6E_var, AbilityCommand("OverlordTransport", 2), false);
                TechTreeAbilityAllow(autoC4E7AE6E_var, AbilityCommand("OverlordTransport", 0), false);
            }
        }

    }
    if ((GameAttributeGameValue("14") == "0001")) {
        autoE52472CC_g = PlayerGroupActive();
        autoE52472CC_var = -1;
        while (true) {
            autoE52472CC_var = PlayerGroupNextPlayer(autoE52472CC_g, autoE52472CC_var);
            if (autoE52472CC_var < 0) { break; }
            TechTreeUnitAllow(autoE52472CC_var, "HighTemplar", false);
            TechTreeUnitAllow(autoE52472CC_var, "Oracle", false);
            TechTreeUnitAllow(autoE52472CC_var, "Ghost", false);
            TechTreeUnitAllow(autoE52472CC_var, "GhostAlternate", false);
            TechTreeUnitAllow(autoE52472CC_var, "GhostNova", false);
            TechTreeUnitAllow(autoE52472CC_var, "Raven", false);
            TechTreeUnitAllow(autoE52472CC_var, "Infestor", false);
            TechTreeUnitAllow(autoE52472CC_var, "InfestorBurrowed", false);
            TechTreeUnitAllow(autoE52472CC_var, "Viper", false);
        }
    }
    else {
        if ((GameAttributeGameValue("14") == "0002")) {
            lib0C8FCC97_gv_get_CountOf_UnitsOf_MassAttack = 5;
            lib0C8FCC97_gv_get_CountOf_UnitsOf_MassAttack_true = true;
            auto119D3E16_g = PlayerGroupActive();
            auto119D3E16_var = -1;
            while (true) {
                auto119D3E16_var = PlayerGroupNextPlayer(auto119D3E16_g, auto119D3E16_var);
                if (auto119D3E16_var < 0) { break; }
                TechTreeAbilityAllow(auto119D3E16_var, AbilityCommand("PulsarBeam", 0), false);
                TechTreeUnitAllow(auto119D3E16_var, "AutoTurret", false);
                TechTreeAbilityAllow(auto119D3E16_var, AbilityCommand("RavenBuild", 0), false);
                TechTreeAbilityAllow(auto119D3E16_var, AbilityCommand("BuildAutoTurret", 0), false);
                TechTreeAbilityAllow(auto119D3E16_var, AbilityCommand("InfestedTerransLayEgg", 0), false);
                TechTreeAbilityAllow(auto119D3E16_var, AbilityCommand("InfestedTerrans", 0), false);
                TechTreeAbilityAllow(auto119D3E16_var, AbilityCommand("MorphToInfestedTerran", 0), false);
            }
        }
        else {
            if ((GameAttributeGameValue("14") == "0003")) {
                lib0C8FCC97_gv_get_CountOf_UnitsOf_MassAttack = 3;
                lib0C8FCC97_gv_get_CountOf_UnitsOf_MassAttack_true = true;
                auto5590860B_g = PlayerGroupActive();
                auto5590860B_var = -1;
                while (true) {
                    auto5590860B_var = PlayerGroupNextPlayer(auto5590860B_g, auto5590860B_var);
                    if (auto5590860B_var < 0) { break; }
                    TechTreeAbilityAllow(auto5590860B_var, AbilityCommand("PulsarBeam", 0), false);
                    TechTreeUnitAllow(auto5590860B_var, "AutoTurret", false);
                    TechTreeAbilityAllow(auto5590860B_var, AbilityCommand("RavenBuild", 0), false);
                    TechTreeAbilityAllow(auto5590860B_var, AbilityCommand("BuildAutoTurret", 0), false);
                    TechTreeAbilityAllow(auto5590860B_var, AbilityCommand("InfestedTerransLayEgg", 0), false);
                    TechTreeAbilityAllow(auto5590860B_var, AbilityCommand("InfestedTerrans", 0), false);
                    TechTreeAbilityAllow(auto5590860B_var, AbilityCommand("MorphToInfestedTerran", 0), false);
                }
            }

        }
    }
    if ((GameAttributeGameValue("13") == "0002")) {
        auto04F7E128_g = PlayerGroupActive();
        auto04F7E128_var = -1;
        while (true) {
            auto04F7E128_var = PlayerGroupNextPlayer(auto04F7E128_g, auto04F7E128_var);
            if (auto04F7E128_var < 0) { break; }
            TechTreeUnitAllow(auto04F7E128_var, "Mothership", false);
        }
    }

    if ((GameAttributeGameValue("10") == "0006")) {
        autoA22AA4AA_g = PlayerGroupActive();
        autoA22AA4AA_var = -1;
        while (true) {
            autoA22AA4AA_var = PlayerGroupNextPlayer(autoA22AA4AA_g, autoA22AA4AA_var);
            if (autoA22AA4AA_var < 0) { break; }
            TechTreeUnitAllow(autoA22AA4AA_var, "PhotonCannon", false);
            TechTreeUnitAllow(autoA22AA4AA_var, "ShieldBattery", false);
            TechTreeUnitAllow(autoA22AA4AA_var, "Bunker", false);
            TechTreeUnitAllow(autoA22AA4AA_var, "MissileTurret", false);
            TechTreeUnitAllow(autoA22AA4AA_var, "PlanetaryFortress", false);
            TechTreeUnitAllow(autoA22AA4AA_var, "SporeCrawler", false);
            TechTreeUnitAllow(autoA22AA4AA_var, "SporeCrawlerUprooted", false);
            TechTreeUnitAllow(autoA22AA4AA_var, "SpineCrawler", false);
            TechTreeUnitAllow(autoA22AA4AA_var, "SpineCrawlerUprooted", false);
        }
    }

    if ((GameAttributeGameValue("12") == "0002")) {
        auto86310458_g = PlayerGroupActive();
        auto86310458_var = -1;
        while (true) {
            auto86310458_var = PlayerGroupNextPlayer(auto86310458_g, auto86310458_var);
            if (auto86310458_var < 0) { break; }
            TechTreeUnitAllow(auto86310458_var, "NydusCanalAttacker", false);
            TechTreeUnitAllow(auto86310458_var, "NydusNetwork", false);
            TechTreeUnitAllow(auto86310458_var, "NydusCanal", false);
            TechTreeAbilityAllow(auto86310458_var, AbilityCommand("NexusMassRecall", 0), false);
            TechTreeAbilityAllow(auto86310458_var, AbilityCommand("MothershipMassRecall", 0), false);
            TechTreeAbilityAllow(auto86310458_var, AbilityCommand("MothershipCoreMassRecall", 0), false);
            TechTreeAbilityAllow(auto86310458_var, AbilityCommand("MassRecall", 0), false);
        }
    }

    autoA74D8B78_val = GameAttributeGameValue("2");
    if (autoA74D8B78_val == "0002") {
        autoA64B5F51_g = PlayerGroupActive();
        autoA64B5F51_var = -1;
        while (true) {
            autoA64B5F51_var = PlayerGroupNextPlayer(autoA64B5F51_g, autoA64B5F51_var);
            if (autoA64B5F51_var < 0) { break; }
            PlayerGroupAdd(lib0C8FCC97_gv_get_GroupOf_Protoss, autoA64B5F51_var);
            auto62C4E680_val = GameAttributePlayerValue("4", autoA64B5F51_var);
            if (auto62C4E680_val == "0001") {
                TechTreeUnitAllow(autoA64B5F51_var, "Zealot", true);
            }
            else if (auto62C4E680_val == "0002") {
                TechTreeUnitAllow(autoA64B5F51_var, "Adept", true);
            }
            else if (auto62C4E680_val == "0003") {
                TechTreeUnitAllow(autoA64B5F51_var, "Sentry", true);
            }
            else if (auto62C4E680_val == "0004") {
                TechTreeUnitAllow(autoA64B5F51_var, "Stalker", true);
            }
            else if (auto62C4E680_val == "0005") {
                TechTreeUnitAllow(autoA64B5F51_var, "DarkTemplar", true);
                TechTreeUnitAllow(autoA64B5F51_var, "HighTemplar", true);
                TechTreeUnitAllow(autoA64B5F51_var, "Archon", true);
                TechTreeUnitAllow(autoA64B5F51_var, "HighTemplarSkinPreview", true);
                if ((GameAttributeGameValue("14") == "0001")) {
                    TechTreeAbilityAllow(autoA64B5F51_var, AbilityCommand("PsiStorm", 0), false);
                }
                else {
                    TechTreeAbilityAllow(autoA64B5F51_var, AbilityCommand("PsiStorm", 0), true);
                }
            }
            else if (auto62C4E680_val == "0006") {
                TechTreeUnitAllow(autoA64B5F51_var, "Immortal", true);
            }
            else if (auto62C4E680_val == "0007") {
                TechTreeUnitAllow(autoA64B5F51_var, "Colossus", true);
            }
            else if (auto62C4E680_val == "0008") {
                TechTreeUnitAllow(autoA64B5F51_var, "Disruptor", true);
            }
            else if (auto62C4E680_val == "0009") {
                TechTreeUnitAllow(autoA64B5F51_var, "Phoenix", true);
            }
            else if (auto62C4E680_val == "0010") {
                TechTreeUnitAllow(autoA64B5F51_var, "VoidRay", true);
            }
            else if (auto62C4E680_val == "0011") {
                TechTreeUnitAllow(autoA64B5F51_var, "Oracle", true);
                TechTreeAbilityAllow(autoA64B5F51_var, AbilityCommand("PulsarBeam", 0), true);
            }
            else if (auto62C4E680_val == "0012") {
                TechTreeUnitAllow(autoA64B5F51_var, "Carrier", true);
            }
            else if (auto62C4E680_val == "0013") {
                TechTreeUnitAllow(autoA64B5F51_var, "Tempest", true);
            }
            else {
            }
        }
    }
    else if (autoA74D8B78_val == "0003") {
        auto2C5D15F0_g = PlayerGroupActive();
        auto2C5D15F0_var = -1;
        while (true) {
            auto2C5D15F0_var = PlayerGroupNextPlayer(auto2C5D15F0_g, auto2C5D15F0_var);
            if (auto2C5D15F0_var < 0) { break; }
            PlayerGroupAdd(lib0C8FCC97_gv_get_GroupOf_Terran, auto2C5D15F0_var);
            auto254173DD_val = GameAttributePlayerValue("5", auto2C5D15F0_var);
            if (auto254173DD_val == "0001") {
                TechTreeUnitAllow(auto2C5D15F0_var, "Marine", true);
            }
            else if (auto254173DD_val == "0002") {
                TechTreeUnitAllow(auto2C5D15F0_var, "Reaper", true);
            }
            else if (auto254173DD_val == "0003") {
                TechTreeUnitAllow(auto2C5D15F0_var, "Marauder", true);
            }
            else if (auto254173DD_val == "0004") {
                TechTreeUnitAllow(auto2C5D15F0_var, "Ghost", true);
                TechTreeUnitAllow(auto2C5D15F0_var, "GhostAlternate", true);
                TechTreeUnitAllow(auto2C5D15F0_var, "GhostNova", true);
            }
            else if (auto254173DD_val == "0005") {
                TechTreeUnitAllow(auto2C5D15F0_var, "Hellion", true);
                TechTreeUnitAllow(auto2C5D15F0_var, "HellionTank", true);
            }
            else if (auto254173DD_val == "0006") {
                TechTreeUnitAllow(auto2C5D15F0_var, "WidowMine", true);
                TechTreeUnitAllow(auto2C5D15F0_var, "WidowMineBurrowed", true);
            }
            else if (auto254173DD_val == "0007") {
                TechTreeUnitAllow(auto2C5D15F0_var, "SiegeTankSkinPreview", true);
                TechTreeUnitAllow(auto2C5D15F0_var, "SiegeTank", true);
                TechTreeUnitAllow(auto2C5D15F0_var, "SiegeTankSieged", true);
            }
            else if (auto254173DD_val == "0008") {
                TechTreeUnitAllow(auto2C5D15F0_var, "Cyclone", true);
            }
            else if (auto254173DD_val == "0009") {
                TechTreeUnitAllow(auto2C5D15F0_var, "ThorAP", true);
            }
            else if (auto254173DD_val == "0010") {
                TechTreeUnitAllow(auto2C5D15F0_var, "Viking", true);
                TechTreeUnitAllow(auto2C5D15F0_var, "VikingFighter", true);
                TechTreeUnitAllow(auto2C5D15F0_var, "VikingAssault", true);
            }
            else if (auto254173DD_val == "0011") {
                TechTreeUnitAllow(auto2C5D15F0_var, "Battlecruiser", true);
            }
            else if (auto254173DD_val == "0012") {
                TechTreeUnitAllow(auto2C5D15F0_var, "Banshee", true);
            }
            else {
            }
        }
    }
    else if (autoA74D8B78_val == "0004") {
        autoFBF5FCBD_g = PlayerGroupActive();
        autoFBF5FCBD_var = -1;
        while (true) {
            autoFBF5FCBD_var = PlayerGroupNextPlayer(autoFBF5FCBD_g, autoFBF5FCBD_var);
            if (autoFBF5FCBD_var < 0) { break; }
            PlayerGroupAdd(lib0C8FCC97_gv_get_GroupOf_Zerg, autoFBF5FCBD_var);
            auto13474EC6_val = GameAttributePlayerValue("6", autoFBF5FCBD_var);
            if (auto13474EC6_val == "0012") {
                TechTreeUnitAllow(autoFBF5FCBD_var, "Zergling", true);
                TechTreeUnitAllow(autoFBF5FCBD_var, "ZerglingBurrowed", true);
            }
            else if (auto13474EC6_val == "0001") {
                TechTreeUnitAllow(autoFBF5FCBD_var, "Zergling", true);
                TechTreeUnitAllow(autoFBF5FCBD_var, "ZerglingBurrowed", true);
                TechTreeUnitAllow(autoFBF5FCBD_var, "Baneling", true);
                TechTreeUnitAllow(autoFBF5FCBD_var, "BanelingBurrowed", true);
                TechTreeUnitAllow(autoFBF5FCBD_var, "BanelingCocoon", true);
            }
            else if (auto13474EC6_val == "0002") {
                TechTreeUnitAllow(autoFBF5FCBD_var, "Roach", true);
                TechTreeUnitAllow(autoFBF5FCBD_var, "RoachBurrowed", true);
            }
            else if (auto13474EC6_val == "0003") {
                TechTreeUnitAllow(autoFBF5FCBD_var, "Roach", true);
                TechTreeUnitAllow(autoFBF5FCBD_var, "RoachBurrowed", true);
                TechTreeUnitAllow(autoFBF5FCBD_var, "Ravager", true);
                TechTreeUnitAllow(autoFBF5FCBD_var, "RavagerBurrowed", true);
                TechTreeUnitAllow(autoFBF5FCBD_var, "RavagerCocoon", true);
            }
            else if (auto13474EC6_val == "0004") {
                TechTreeUnitAllow(autoFBF5FCBD_var, "Hydralisk", true);
                TechTreeUnitAllow(autoFBF5FCBD_var, "HydraliskBurrowed", true);
            }
            else if (auto13474EC6_val == "0005") {
                TechTreeUnitAllow(autoFBF5FCBD_var, "Hydralisk", true);
                TechTreeUnitAllow(autoFBF5FCBD_var, "HydraliskBurrowed", true);
                TechTreeUnitAllow(autoFBF5FCBD_var, "LurkerMP", true);
                TechTreeUnitAllow(autoFBF5FCBD_var, "LurkerMPBurrowed", true);
                TechTreeUnitAllow(autoFBF5FCBD_var, "LurkerMPEgg", true);
            }
            else if (auto13474EC6_val == "0006") {
                TechTreeUnitAllow(autoFBF5FCBD_var, "Mutalisk", true);
            }
            else if (auto13474EC6_val == "0007") {
                TechTreeUnitAllow(autoFBF5FCBD_var, "Corruptor", true);
                TechTreeUnitAllow(autoFBF5FCBD_var, "BroodLord", true);
                TechTreeUnitAllow(autoFBF5FCBD_var, "BroodLordCocoon", true);
                TechTreeUnitAllow(autoFBF5FCBD_var, "Broodling", true);
            }
            else if (auto13474EC6_val == "0008") {
                TechTreeUnitAllow(autoFBF5FCBD_var, "SwarmHostMP", true);
                TechTreeUnitAllow(autoFBF5FCBD_var, "SwarmHostBurrowedMP", true);
                TechTreeUnitAllow(autoFBF5FCBD_var, "LocustMP", true);
                TechTreeUnitAllow(autoFBF5FCBD_var, "LocustMPFlying", true);
            }
            else if (auto13474EC6_val == "0009") {
                TechTreeUnitAllow(autoFBF5FCBD_var, "Infestor", true);
                TechTreeUnitAllow(autoFBF5FCBD_var, "InfestorBurrowed", true);
                TechTreeAbilityAllow(autoFBF5FCBD_var, AbilityCommand("InfestedTerransLayEgg", 0), true);
                TechTreeAbilityAllow(autoFBF5FCBD_var, AbilityCommand("InfestedTerrans", 0), true);
                TechTreeAbilityAllow(autoFBF5FCBD_var, AbilityCommand("MorphToInfestedTerran", 0), true);
            }
            else if (auto13474EC6_val == "0010") {
                TechTreeUnitAllow(autoFBF5FCBD_var, "Ultralisk", true);
                TechTreeUnitAllow(autoFBF5FCBD_var, "UltraliskBurrowed", true);
            }
            else if (auto13474EC6_val == "0011") {
            }
            else {
            }
        }
    }
    else if (autoA74D8B78_val == "0001") {
        auto0001DED5_g = PlayerGroupActive();
        auto0001DED5_var = -1;
        while (true) {
            auto0001DED5_var = PlayerGroupNextPlayer(auto0001DED5_g, auto0001DED5_var);
            if (auto0001DED5_var < 0) { break; }
            auto97642312_val = GameAttributePlayerValue("3", auto0001DED5_var);
            if (auto97642312_val == "0001") {
                PlayerGroupAdd(lib0C8FCC97_gv_get_GroupOf_Protoss, auto0001DED5_var);
                auto590FED81_val = GameAttributePlayerValue("7", auto0001DED5_var);
                if (auto590FED81_val == "0001") {
                    TechTreeUnitAllow(auto0001DED5_var, "Zealot", true);
                }
                else if (auto590FED81_val == "0002") {
                    TechTreeUnitAllow(auto0001DED5_var, "Adept", true);
                }
                else if (auto590FED81_val == "0003") {
                    TechTreeUnitAllow(auto0001DED5_var, "Sentry", true);
                }
                else if (auto590FED81_val == "0004") {
                    TechTreeUnitAllow(auto0001DED5_var, "Stalker", true);
                }
                else if (auto590FED81_val == "0005") {
                    TechTreeUnitAllow(auto0001DED5_var, "DarkTemplar", true);
                    TechTreeUnitAllow(auto0001DED5_var, "HighTemplar", true);
                    TechTreeUnitAllow(auto0001DED5_var, "Archon", true);
                    TechTreeUnitAllow(auto0001DED5_var, "HighTemplarSkinPreview", true);
                    if ((GameAttributeGameValue("14") == "0001")) {
                        TechTreeAbilityAllow(auto0001DED5_var, AbilityCommand("PsiStorm", 0), false);
                    }
                    else {
                        TechTreeAbilityAllow(auto0001DED5_var, AbilityCommand("PsiStorm", 0), true);
                    }
                }
                else if (auto590FED81_val == "0006") {
                    TechTreeUnitAllow(auto0001DED5_var, "Immortal", true);
                }
                else if (auto590FED81_val == "0007") {
                    TechTreeUnitAllow(auto0001DED5_var, "Colossus", true);
                }
                else if (auto590FED81_val == "0008") {
                    TechTreeUnitAllow(auto0001DED5_var, "Disruptor", true);
                }
                else if (auto590FED81_val == "0009") {
                    TechTreeUnitAllow(auto0001DED5_var, "Phoenix", true);
                }
                else if (auto590FED81_val == "0010") {
                    TechTreeUnitAllow(auto0001DED5_var, "VoidRay", true);
                }
                else if (auto590FED81_val == "0011") {
                    TechTreeUnitAllow(auto0001DED5_var, "Oracle", true);
                    TechTreeAbilityAllow(auto0001DED5_var, AbilityCommand("PulsarBeam", 0), true);
                }
                else if (auto590FED81_val == "0012") {
                    TechTreeUnitAllow(auto0001DED5_var, "Carrier", true);
                }
                else if (auto590FED81_val == "0013") {
                    TechTreeUnitAllow(auto0001DED5_var, "Tempest", true);
                }
                else {
                }
            }
            else if (auto97642312_val == "0002") {
                PlayerGroupAdd(lib0C8FCC97_gv_get_GroupOf_Terran, auto0001DED5_var);
                auto4B5E1035_val = GameAttributePlayerValue("8", auto0001DED5_var);
                if (auto4B5E1035_val == "0001") {
                    TechTreeUnitAllow(auto0001DED5_var, "Marine", true);
                }
                else if (auto4B5E1035_val == "0002") {
                    TechTreeUnitAllow(auto0001DED5_var, "Reaper", true);
                }
                else if (auto4B5E1035_val == "0003") {
                    TechTreeUnitAllow(auto0001DED5_var, "Marauder", true);
                }
                else if (auto4B5E1035_val == "0004") {
                    TechTreeUnitAllow(auto0001DED5_var, "Ghost", true);
                    TechTreeUnitAllow(auto0001DED5_var, "GhostAlternate", true);
                    TechTreeUnitAllow(auto0001DED5_var, "GhostNova", true);
                }
                else if (auto4B5E1035_val == "0005") {
                    TechTreeUnitAllow(auto0001DED5_var, "Hellion", true);
                    TechTreeUnitAllow(auto0001DED5_var, "HellionTank", true);
                }
                else if (auto4B5E1035_val == "0006") {
                    TechTreeUnitAllow(auto0001DED5_var, "WidowMine", true);
                    TechTreeUnitAllow(auto0001DED5_var, "WidowMineBurrowed", true);
                }
                else if (auto4B5E1035_val == "0007") {
                    TechTreeUnitAllow(auto0001DED5_var, "SiegeTankSkinPreview", true);
                    TechTreeUnitAllow(auto0001DED5_var, "SiegeTank", true);
                    TechTreeUnitAllow(auto0001DED5_var, "SiegeTankSieged", true);
                }
                else if (auto4B5E1035_val == "0008") {
                    TechTreeUnitAllow(auto0001DED5_var, "Cyclone", true);
                }
                else if (auto4B5E1035_val == "0009") {
                    TechTreeUnitAllow(auto0001DED5_var, "ThorAP", true);
                }
                else if (auto4B5E1035_val == "0010") {
                    TechTreeUnitAllow(auto0001DED5_var, "Viking", true);
                    TechTreeUnitAllow(auto0001DED5_var, "VikingFighter", true);
                    TechTreeUnitAllow(auto0001DED5_var, "VikingAssault", true);
                }
                else if (auto4B5E1035_val == "0011") {
                    TechTreeUnitAllow(auto0001DED5_var, "Battlecruiser", true);
                }
                else if (auto4B5E1035_val == "0012") {
                    TechTreeUnitAllow(auto0001DED5_var, "Banshee", true);
                }
                else {
                }
            }
            else if (auto97642312_val == "0003") {
                PlayerGroupAdd(lib0C8FCC97_gv_get_GroupOf_Zerg, auto0001DED5_var);
                autoF66B114C_val = GameAttributePlayerValue("9", auto0001DED5_var);
                if (autoF66B114C_val == "0012") {
                    TechTreeUnitAllow(auto0001DED5_var, "Zergling", true);
                    TechTreeUnitAllow(auto0001DED5_var, "ZerglingBurrowed", true);
                }
                else if (autoF66B114C_val == "0001") {
                    TechTreeUnitAllow(auto0001DED5_var, "Zergling", true);
                    TechTreeUnitAllow(auto0001DED5_var, "ZerglingBurrowed", true);
                    TechTreeUnitAllow(auto0001DED5_var, "Baneling", true);
                    TechTreeUnitAllow(auto0001DED5_var, "BanelingBurrowed", true);
                    TechTreeUnitAllow(auto0001DED5_var, "BanelingCocoon", true);
                }
                else if (autoF66B114C_val == "0002") {
                    TechTreeUnitAllow(auto0001DED5_var, "Roach", true);
                    TechTreeUnitAllow(auto0001DED5_var, "RoachBurrowed", true);
                }
                else if (autoF66B114C_val == "0003") {
                    TechTreeUnitAllow(auto0001DED5_var, "Roach", true);
                    TechTreeUnitAllow(auto0001DED5_var, "RoachBurrowed", true);
                    TechTreeUnitAllow(auto0001DED5_var, "Ravager", true);
                    TechTreeUnitAllow(auto0001DED5_var, "RavagerBurrowed", true);
                    TechTreeUnitAllow(auto0001DED5_var, "RavagerCocoon", true);
                }
                else if (autoF66B114C_val == "0004") {
                    TechTreeUnitAllow(auto0001DED5_var, "Hydralisk", true);
                    TechTreeUnitAllow(auto0001DED5_var, "HydraliskBurrowed", true);
                }
                else if (autoF66B114C_val == "0005") {
                    TechTreeUnitAllow(auto0001DED5_var, "Hydralisk", true);
                    TechTreeUnitAllow(auto0001DED5_var, "HydraliskBurrowed", true);
                    TechTreeUnitAllow(auto0001DED5_var, "LurkerMP", true);
                    TechTreeUnitAllow(auto0001DED5_var, "LurkerMPBurrowed", true);
                    TechTreeUnitAllow(auto0001DED5_var, "LurkerMPEgg", true);
                }
                else if (autoF66B114C_val == "0006") {
                    TechTreeUnitAllow(auto0001DED5_var, "Mutalisk", true);
                }
                else if (autoF66B114C_val == "0007") {
                    TechTreeUnitAllow(auto0001DED5_var, "Corruptor", true);
                    TechTreeUnitAllow(auto0001DED5_var, "BroodLord", true);
                    TechTreeUnitAllow(auto0001DED5_var, "BroodLordCocoon", true);
                    TechTreeUnitAllow(auto0001DED5_var, "Broodling", true);
                }
                else if (autoF66B114C_val == "0008") {
                    TechTreeUnitAllow(auto0001DED5_var, "SwarmHostMP", true);
                    TechTreeUnitAllow(auto0001DED5_var, "SwarmHostBurrowedMP", true);
                    TechTreeUnitAllow(auto0001DED5_var, "LocustMP", true);
                    TechTreeUnitAllow(auto0001DED5_var, "LocustMPFlying", true);
                }
                else if (autoF66B114C_val == "0009") {
                    TechTreeUnitAllow(auto0001DED5_var, "Infestor", true);
                    TechTreeUnitAllow(auto0001DED5_var, "InfestorBurrowed", true);
                    TechTreeAbilityAllow(auto0001DED5_var, AbilityCommand("InfestedTerransLayEgg", 0), true);
                    TechTreeAbilityAllow(auto0001DED5_var, AbilityCommand("InfestedTerrans", 0), true);
                    TechTreeAbilityAllow(auto0001DED5_var, AbilityCommand("MorphToInfestedTerran", 0), true);
                }
                else if (autoF66B114C_val == "0010") {
                    TechTreeUnitAllow(auto0001DED5_var, "Ultralisk", true);
                    TechTreeUnitAllow(auto0001DED5_var, "UltraliskBurrowed", true);
                }
                else if (autoF66B114C_val == "0011") {
                }
                else {
                }
            }
            else {
            }
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib0C8FCC97_gt_MBLaunch_Init () {
    lib0C8FCC97_gt_MBLaunch = TriggerCreate("lib0C8FCC97_gt_MBLaunch_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MB | LookAfter_Queen
//--------------------------------------------------------------------------------------------------
bool lib0C8FCC97_gt_MBLookAfter_Queen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__now_CountOf_Queens;
    int lv__max_CountOf_Queens;

    // Automatic Variable Declarations
    playergroup auto9FC5D1FD_g;
    int auto9FC5D1FD_var;

    // Variable Initialization
    lv__max_CountOf_Queens = (lib0C8FCC97_gv_get_CountOf_Queens + 1);

    // Conditions
    if (testConds) {
        if (!((lib0C8FCC97_gv_get_CountOf_Queens_true == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9FC5D1FD_g = lib0C8FCC97_gv_get_GroupOf_Zerg;
    auto9FC5D1FD_var = -1;
    while (true) {
        auto9FC5D1FD_var = PlayerGroupNextPlayer(auto9FC5D1FD_g, auto9FC5D1FD_var);
        if (auto9FC5D1FD_var < 0) { break; }
        if ((((GameAttributePlayerValue("6", auto9FC5D1FD_var) != "0011") || (GameAttributePlayerValue("9", auto9FC5D1FD_var) != "0011")) && (PlayerStatus(auto9FC5D1FD_var) == c_playerStatusActive))) {
            lv__now_CountOf_Queens = UnitCount("Queen", auto9FC5D1FD_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            lv__now_CountOf_Queens += UnitCount("QueenBurrowed", auto9FC5D1FD_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((lv__now_CountOf_Queens >= lv__max_CountOf_Queens)) {
                UnitKill(UnitGroupRandomUnit(UnitGroup("Queen", auto9FC5D1FD_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
                lv__now_CountOf_Queens = UnitCount("Queen", auto9FC5D1FD_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                lv__now_CountOf_Queens += UnitCount("QueenBurrowed", auto9FC5D1FD_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                if ((lv__now_CountOf_Queens >= lv__max_CountOf_Queens)) {
                    UnitKill(UnitGroupRandomUnit(UnitGroup("QueenBurrowed", auto9FC5D1FD_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
                }

            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib0C8FCC97_gt_MBLookAfter_Queen_Init () {
    lib0C8FCC97_gt_MBLookAfter_Queen = TriggerCreate("lib0C8FCC97_gt_MBLookAfter_Queen_Func");
    TriggerAddEventTimePeriodic(lib0C8FCC97_gt_MBLookAfter_Queen, 2.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MB | LookAfter_Infestor/Viper
//--------------------------------------------------------------------------------------------------
bool lib0C8FCC97_gt_MBLookAfter_InfestorViper_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__now_CountOf_Infestor;
    int lv__max_CountOf_Infestor;
    int lv__now_CountOf_Viper;
    int lv__max_CountOf_Viper;

    // Automatic Variable Declarations
    playergroup auto99D616F2_g;
    int auto99D616F2_var;

    // Variable Initialization
    lv__max_CountOf_Infestor = (lib0C8FCC97_gv_get_CountOf_UnitsOf_MassAttack + 1);
    lv__max_CountOf_Viper = (lib0C8FCC97_gv_get_CountOf_UnitsOf_MassAttack + 1);

    // Conditions
    if (testConds) {
        if (!((lib0C8FCC97_gv_get_CountOf_UnitsOf_MassAttack_true == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto99D616F2_g = lib0C8FCC97_gv_get_GroupOf_Zerg;
    auto99D616F2_var = -1;
    while (true) {
        auto99D616F2_var = PlayerGroupNextPlayer(auto99D616F2_g, auto99D616F2_var);
        if (auto99D616F2_var < 0) { break; }
        if ((((GameAttributePlayerValue("6", auto99D616F2_var) != "0009") || (GameAttributePlayerValue("9", auto99D616F2_var) != "0009")) && (PlayerStatus(auto99D616F2_var) == c_playerStatusActive))) {
            lv__now_CountOf_Infestor = UnitCount("Infestor", auto99D616F2_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            lv__now_CountOf_Infestor += UnitCount("InfestorBurrowed", auto99D616F2_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((lv__now_CountOf_Infestor >= lv__max_CountOf_Infestor)) {
                UnitKill(UnitGroupRandomUnit(UnitGroup("Infestor", auto99D616F2_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
                lv__now_CountOf_Infestor = UnitCount("Infestor", auto99D616F2_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                lv__now_CountOf_Infestor += UnitCount("InfestorBurrowed", auto99D616F2_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                if ((lv__now_CountOf_Infestor >= lv__max_CountOf_Infestor)) {
                    UnitKill(UnitGroupRandomUnit(UnitGroup("InfestorBurrowed", auto99D616F2_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
                }

            }

        }

        if ((PlayerStatus(auto99D616F2_var) == c_playerStatusActive)) {
            lv__now_CountOf_Viper = UnitCount("Viper", auto99D616F2_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((lv__now_CountOf_Viper >= lv__max_CountOf_Viper)) {
                UnitKill(UnitGroupRandomUnit(UnitGroup("Viper", auto99D616F2_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib0C8FCC97_gt_MBLookAfter_InfestorViper_Init () {
    lib0C8FCC97_gt_MBLookAfter_InfestorViper = TriggerCreate("lib0C8FCC97_gt_MBLookAfter_InfestorViper_Func");
    TriggerAddEventTimePeriodic(lib0C8FCC97_gt_MBLookAfter_InfestorViper, 2.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MB | LookAfter_Raven/Ghost
//--------------------------------------------------------------------------------------------------
bool lib0C8FCC97_gt_MBLookAfter_RavenGhost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__now_CountOf_Raven;
    int lv__max_CountOf_Raven;
    int lv__now_CountOf_Ghost;
    int lv__max_CountOf_Ghost;

    // Automatic Variable Declarations
    playergroup auto3EC575CB_g;
    int auto3EC575CB_var;

    // Variable Initialization
    lv__max_CountOf_Raven = (lib0C8FCC97_gv_get_CountOf_UnitsOf_MassAttack + 1);
    lv__max_CountOf_Ghost = (lib0C8FCC97_gv_get_CountOf_UnitsOf_MassAttack + 1);

    // Conditions
    if (testConds) {
        if (!((lib0C8FCC97_gv_get_CountOf_UnitsOf_MassAttack_true == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3EC575CB_g = lib0C8FCC97_gv_get_GroupOf_Terran;
    auto3EC575CB_var = -1;
    while (true) {
        auto3EC575CB_var = PlayerGroupNextPlayer(auto3EC575CB_g, auto3EC575CB_var);
        if (auto3EC575CB_var < 0) { break; }
        if ((((GameAttributePlayerValue("5", auto3EC575CB_var) != "0004") || (GameAttributePlayerValue("8", auto3EC575CB_var) != "0004")) && (PlayerStatus(auto3EC575CB_var) == c_playerStatusActive))) {
            lv__now_CountOf_Ghost = UnitCount("Ghost", auto3EC575CB_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            lv__now_CountOf_Ghost += UnitCount("GhostAlternate", auto3EC575CB_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            lv__now_CountOf_Ghost += UnitCount("GhostNova", auto3EC575CB_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((lv__now_CountOf_Ghost >= lv__max_CountOf_Ghost)) {
                UnitKill(UnitGroupRandomUnit(UnitGroup("Ghost", auto3EC575CB_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
            }

        }

        if ((PlayerStatus(auto3EC575CB_var) == c_playerStatusActive)) {
            lv__now_CountOf_Raven = UnitCount("Raven", auto3EC575CB_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((lv__now_CountOf_Raven >= lv__max_CountOf_Raven)) {
                UnitKill(UnitGroupRandomUnit(UnitGroup("Raven", auto3EC575CB_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib0C8FCC97_gt_MBLookAfter_RavenGhost_Init () {
    lib0C8FCC97_gt_MBLookAfter_RavenGhost = TriggerCreate("lib0C8FCC97_gt_MBLookAfter_RavenGhost_Func");
    TriggerAddEventTimePeriodic(lib0C8FCC97_gt_MBLookAfter_RavenGhost, 2.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MB | LookAfter_Oracle/Templar
//--------------------------------------------------------------------------------------------------
bool lib0C8FCC97_gt_MBLookAfter_OracleTemplar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__now_CountOf_Oracle;
    int lv__max_CountOf_Oracle;
    int lv__now_CountOf_Templar;
    int lv__max_CountOf_Templar;

    // Automatic Variable Declarations
    playergroup auto63BE69CE_g;
    int auto63BE69CE_var;

    // Variable Initialization
    lv__max_CountOf_Oracle = (lib0C8FCC97_gv_get_CountOf_UnitsOf_MassAttack + 1);
    lv__max_CountOf_Templar = (lib0C8FCC97_gv_get_CountOf_UnitsOf_MassAttack + 1);

    // Conditions
    if (testConds) {
        if (!((lib0C8FCC97_gv_get_CountOf_UnitsOf_MassAttack_true == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto63BE69CE_g = lib0C8FCC97_gv_get_GroupOf_Protoss;
    auto63BE69CE_var = -1;
    while (true) {
        auto63BE69CE_var = PlayerGroupNextPlayer(auto63BE69CE_g, auto63BE69CE_var);
        if (auto63BE69CE_var < 0) { break; }
        if ((((GameAttributePlayerValue("4", auto63BE69CE_var) != "0005") || (GameAttributePlayerValue("7", auto63BE69CE_var) != "0005")) && (PlayerStatus(auto63BE69CE_var) == c_playerStatusActive))) {
            lv__now_CountOf_Templar = UnitCount("HighTemplar", auto63BE69CE_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((lv__now_CountOf_Templar >= lv__max_CountOf_Templar)) {
                UnitKill(UnitGroupRandomUnit(UnitGroup("HighTemplar", auto63BE69CE_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
            }

        }

        if (((GameAttributePlayerValue("4", auto63BE69CE_var) != "0011") && (GameAttributePlayerValue("7", auto63BE69CE_var) != "0011") && (PlayerStatus(auto63BE69CE_var) == c_playerStatusActive))) {
            lv__now_CountOf_Oracle = UnitCount("Oracle", auto63BE69CE_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((lv__now_CountOf_Oracle >= lv__max_CountOf_Oracle)) {
                UnitKill(UnitGroupRandomUnit(UnitGroup("Oracle", auto63BE69CE_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib0C8FCC97_gt_MBLookAfter_OracleTemplar_Init () {
    lib0C8FCC97_gt_MBLookAfter_OracleTemplar = TriggerCreate("lib0C8FCC97_gt_MBLookAfter_OracleTemplar_Func");
    TriggerAddEventTimePeriodic(lib0C8FCC97_gt_MBLookAfter_OracleTemplar, 2.0, c_timeReal);
}

void lib0C8FCC97_InitTriggers () {
    lib0C8FCC97_gt_MBChangeRaceOfPlayer_Init();
    lib0C8FCC97_gt_MBInitialization_Init();
    lib0C8FCC97_gt_MBLaunch_Init();
    lib0C8FCC97_gt_MBLookAfter_Queen_Init();
    lib0C8FCC97_gt_MBLookAfter_InfestorViper_Init();
    lib0C8FCC97_gt_MBLookAfter_RavenGhost_Init();
    lib0C8FCC97_gt_MBLookAfter_OracleTemplar_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib0C8FCC97_InitLib_completed = false;

void lib0C8FCC97_InitLib () {
    if (lib0C8FCC97_InitLib_completed) {
        return;
    }

    lib0C8FCC97_InitLib_completed = true;

    lib0C8FCC97_InitLibraries();
    lib0C8FCC97_InitVariables();
    lib0C8FCC97_InitTriggers();
}

