include "TriggerLibs/NativeLib"

include "Lib394B321C_h"

//--------------------------------------------------------------------------------------------------
// Library: Library
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib394B321C_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool lib394B321C_InitVariables_completed = false;

void lib394B321C_InitVariables () {
    if (lib394B321C_InitVariables_completed) {
        return;
    }

    lib394B321C_InitVariables_completed = true;

}

// Functions
bool lib394B321C_gf_DoesUnitTypeHaveEnergy (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_unitType == "Sentry") || (lp_unitType == "HighTemplar") || (lp_unitType == "Phoenix") || (lp_unitType == "Oracle") || (lp_unitType == "Mothership") || (lp_unitType == "ShieldBattery") || (lp_unitType == "Nexus") || (lp_unitType == "Ghost") || (lp_unitType == "Medivac") || (lp_unitType == "Raven") || (lp_unitType == "Banshee") || (lp_unitType == "OrbitalCommand") || (lp_unitType == "Viper") || (lp_unitType == "Infestor") || (lp_unitType == "Overseer") || (lp_unitType == "Queen"))) {
        return true;
    }
    else {
        return false;
    }
}

trigger auto_lib394B321C_gf_UGAllowAddUpgrades_1_Trigger = null;

void lib394B321C_gf_UGAllowAddUpgrades_1 () {
    if (auto_lib394B321C_gf_UGAllowAddUpgrades_1_Trigger == null) {
        auto_lib394B321C_gf_UGAllowAddUpgrades_1_Trigger = TriggerCreate("auto_lib394B321C_gf_UGAllowAddUpgrades_1_TriggerFunc");
    }

    TriggerExecute(auto_lib394B321C_gf_UGAllowAddUpgrades_1_Trigger, false, false);
}

bool auto_lib394B321C_gf_UGAllowAddUpgrades_1_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__upgradeNumber;

    // Automatic Variable Declarations
    playergroup auto00B3DE63_g;
    int auto00B3DE63_var;
    string auto4B915F38_val;
    const int auto7602F08B_ae = lib394B321C_gv_uGprotossUpgradesAmount;
    const int auto7602F08B_ai = 1;
    const int auto5DD28ED7_ae = lib394B321C_gv_uGterranUpgradesAmount;
    const int auto5DD28ED7_ai = 1;
    const int auto6CF1E1A0_ae = lib394B321C_gv_uGzergUpgradesAmount;
    const int auto6CF1E1A0_ai = 1;

    // Variable Initialization

    // Implementation
    auto00B3DE63_g = PlayerGroupActive();
    auto00B3DE63_var = -1;
    while (true) {
        auto00B3DE63_var = PlayerGroupNextPlayer(auto00B3DE63_g, auto00B3DE63_var);
        if (auto00B3DE63_var < 0) { break; }
        auto4B915F38_val = PlayerRace(auto00B3DE63_var);
        if (auto4B915F38_val == "Prot") {
            lv__upgradeNumber = 1;
            for ( ; ( (auto7602F08B_ai >= 0 && lv__upgradeNumber <= auto7602F08B_ae) || (auto7602F08B_ai < 0 && lv__upgradeNumber >= auto7602F08B_ae) ) ; lv__upgradeNumber += auto7602F08B_ai ) {
                TechTreeUpgradeAllow(auto00B3DE63_var, lib394B321C_gv_uGupgradesArrayOfRace[1][lv__upgradeNumber], true);
                TechTreeUpgradeAddLevel(auto00B3DE63_var, lib394B321C_gv_uGupgradesArrayOfRace[1][lv__upgradeNumber], 1);
            }
        }
        else if (auto4B915F38_val == "Terr") {
            lv__upgradeNumber = 1;
            for ( ; ( (auto5DD28ED7_ai >= 0 && lv__upgradeNumber <= auto5DD28ED7_ae) || (auto5DD28ED7_ai < 0 && lv__upgradeNumber >= auto5DD28ED7_ae) ) ; lv__upgradeNumber += auto5DD28ED7_ai ) {
                TechTreeUpgradeAllow(auto00B3DE63_var, lib394B321C_gv_uGupgradesArrayOfRace[2][lv__upgradeNumber], true);
                TechTreeUpgradeAddLevel(auto00B3DE63_var, lib394B321C_gv_uGupgradesArrayOfRace[2][lv__upgradeNumber], 1);
            }
        }
        else if (auto4B915F38_val == "Zerg") {
            lv__upgradeNumber = 1;
            for ( ; ( (auto6CF1E1A0_ai >= 0 && lv__upgradeNumber <= auto6CF1E1A0_ae) || (auto6CF1E1A0_ai < 0 && lv__upgradeNumber >= auto6CF1E1A0_ae) ) ; lv__upgradeNumber += auto6CF1E1A0_ai ) {
                TechTreeUpgradeAllow(auto00B3DE63_var, lib394B321C_gv_uGupgradesArrayOfRace[3][lv__upgradeNumber], true);
                TechTreeUpgradeAddLevel(auto00B3DE63_var, lib394B321C_gv_uGupgradesArrayOfRace[3][lv__upgradeNumber], 1);
            }
        }
        else {
        }
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_394B321C_505D2CB2"));
    return true;
}

trigger auto_lib394B321C_gf_UGAllowAddUpgrades_2_Trigger = null;

void lib394B321C_gf_UGAllowAddUpgrades_2 () {
    if (auto_lib394B321C_gf_UGAllowAddUpgrades_2_Trigger == null) {
        auto_lib394B321C_gf_UGAllowAddUpgrades_2_Trigger = TriggerCreate("auto_lib394B321C_gf_UGAllowAddUpgrades_2_TriggerFunc");
    }

    TriggerExecute(auto_lib394B321C_gf_UGAllowAddUpgrades_2_Trigger, false, false);
}

bool auto_lib394B321C_gf_UGAllowAddUpgrades_2_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto374CB863_g;
    int auto374CB863_var;
    string autoF6EC35ED_val;

    // Implementation
    auto374CB863_g = PlayerGroupActive();
    auto374CB863_var = -1;
    while (true) {
        auto374CB863_var = PlayerGroupNextPlayer(auto374CB863_g, auto374CB863_var);
        if (auto374CB863_var < 0) { break; }
        autoF6EC35ED_val = PlayerRace(auto374CB863_var);
        if (autoF6EC35ED_val == "Prot") {
            TechTreeUpgradeAllow(auto374CB863_var, "ProtossGroundWeaponsLevel1", true);
            TechTreeUpgradeAllow(auto374CB863_var, "ProtossGroundWeaponsLevel2", true);
            TechTreeUpgradeAllow(auto374CB863_var, "ProtossGroundWeaponsLevel3", true);
            TechTreeUpgradeAllow(auto374CB863_var, "ProtossAirWeaponsLevel1", true);
            TechTreeUpgradeAllow(auto374CB863_var, "ProtossAirWeaponsLevel2", true);
            TechTreeUpgradeAllow(auto374CB863_var, "ProtossAirWeaponsLevel3", true);
            TechTreeUpgradeAddLevel(auto374CB863_var, "ProtossGroundWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "ProtossGroundWeaponsLevel2", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "ProtossGroundWeaponsLevel3", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "ProtossAirWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "ProtossAirWeaponsLevel2", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "ProtossAirWeaponsLevel3", 1);
            TechTreeUpgradeAllow(auto374CB863_var, "ProtossGroundArmorsLevel1", true);
            TechTreeUpgradeAllow(auto374CB863_var, "ProtossGroundArmorsLevel2", true);
            TechTreeUpgradeAllow(auto374CB863_var, "ProtossGroundArmorsLevel3", true);
            TechTreeUpgradeAllow(auto374CB863_var, "ProtossAirArmorsLevel1", true);
            TechTreeUpgradeAllow(auto374CB863_var, "ProtossAirArmorsLevel2", true);
            TechTreeUpgradeAllow(auto374CB863_var, "ProtossAirArmorsLevel3", true);
            TechTreeUpgradeAllow(auto374CB863_var, "ProtossShieldsLevel1", true);
            TechTreeUpgradeAllow(auto374CB863_var, "ProtossShieldsLevel2", true);
            TechTreeUpgradeAllow(auto374CB863_var, "ProtossShieldsLevel3", true);
            TechTreeUpgradeAddLevel(auto374CB863_var, "ProtossGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "ProtossGroundArmorsLevel2", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "ProtossGroundArmorsLevel3", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "ProtossAirArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "ProtossAirArmorsLevel2", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "ProtossAirArmorsLevel3", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "ProtossShieldsLevel1", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "ProtossShieldsLevel2", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "ProtossShieldsLevel3", 1);
        }
        else if (autoF6EC35ED_val == "Terr") {
            TechTreeUpgradeAllow(auto374CB863_var, "TerranInfantryWeaponsLevel1", true);
            TechTreeUpgradeAllow(auto374CB863_var, "TerranInfantryWeaponsLevel2", true);
            TechTreeUpgradeAllow(auto374CB863_var, "TerranInfantryWeaponsLevel3", true);
            TechTreeUpgradeAllow(auto374CB863_var, "TerranVehicleWeaponsLevel1", true);
            TechTreeUpgradeAllow(auto374CB863_var, "TerranVehicleWeaponsLevel2", true);
            TechTreeUpgradeAllow(auto374CB863_var, "TerranVehicleWeaponsLevel3", true);
            TechTreeUpgradeAllow(auto374CB863_var, "TerranShipWeaponsLevel1", true);
            TechTreeUpgradeAllow(auto374CB863_var, "TerranShipWeaponsLevel2", true);
            TechTreeUpgradeAllow(auto374CB863_var, "TerranShipWeaponsLevel3", true);
            TechTreeUpgradeAddLevel(auto374CB863_var, "TerranInfantryWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "TerranInfantryWeaponsLevel2", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "TerranInfantryWeaponsLevel3", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "TerranVehicleWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "TerranVehicleWeaponsLevel2", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "TerranVehicleWeaponsLevel3", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "TerranShipWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "TerranShipWeaponsLevel2", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "TerranShipWeaponsLevel3", 1);
            TechTreeUpgradeAllow(auto374CB863_var, "TerranInfantryArmorsLevel1", true);
            TechTreeUpgradeAllow(auto374CB863_var, "TerranInfantryArmorsLevel2", true);
            TechTreeUpgradeAllow(auto374CB863_var, "TerranInfantryArmorsLevel3", true);
            TechTreeUpgradeAllow(auto374CB863_var, "TerranVehicleAndShipArmorsLevel1", true);
            TechTreeUpgradeAllow(auto374CB863_var, "TerranVehicleAndShipArmorsLevel2", true);
            TechTreeUpgradeAllow(auto374CB863_var, "TerranVehicleAndShipArmorsLevel3", true);
            TechTreeUpgradeAddLevel(auto374CB863_var, "TerranInfantryArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "TerranInfantryArmorsLevel2", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "TerranInfantryArmorsLevel3", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "TerranVehicleAndShipArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "TerranVehicleAndShipArmorsLevel2", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "TerranVehicleAndShipArmorsLevel3", 1);
        }
        else if (autoF6EC35ED_val == "Zerg") {
            TechTreeUpgradeAllow(auto374CB863_var, "ZergMeleeWeaponsLevel1", true);
            TechTreeUpgradeAllow(auto374CB863_var, "ZergMeleeWeaponsLevel2", true);
            TechTreeUpgradeAllow(auto374CB863_var, "ZergMeleeWeaponsLevel3", true);
            TechTreeUpgradeAllow(auto374CB863_var, "ZergMissileWeaponsLevel1", true);
            TechTreeUpgradeAllow(auto374CB863_var, "ZergMissileWeaponsLevel2", true);
            TechTreeUpgradeAllow(auto374CB863_var, "ZergMissileWeaponsLevel3", true);
            TechTreeUpgradeAllow(auto374CB863_var, "ZergFlyerWeaponsLevel1", true);
            TechTreeUpgradeAllow(auto374CB863_var, "ZergFlyerWeaponsLevel2", true);
            TechTreeUpgradeAllow(auto374CB863_var, "ZergFlyerWeaponsLevel3", true);
            TechTreeUpgradeAddLevel(auto374CB863_var, "ZergMeleeWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "ZergMeleeWeaponsLevel2", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "ZergMeleeWeaponsLevel3", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "ZergMissileWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "ZergMissileWeaponsLevel2", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "ZergMissileWeaponsLevel3", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "ZergFlyerWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "ZergFlyerWeaponsLevel2", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "ZergFlyerWeaponsLevel3", 1);
            TechTreeUpgradeAllow(auto374CB863_var, "ZergGroundArmorsLevel1", true);
            TechTreeUpgradeAllow(auto374CB863_var, "ZergGroundArmorsLevel2", true);
            TechTreeUpgradeAllow(auto374CB863_var, "ZergGroundArmorsLevel3", true);
            TechTreeUpgradeAllow(auto374CB863_var, "ZergFlyerArmorsLevel1", true);
            TechTreeUpgradeAllow(auto374CB863_var, "ZergFlyerArmorsLevel2", true);
            TechTreeUpgradeAllow(auto374CB863_var, "ZergFlyerArmorsLevel3", true);
            TechTreeUpgradeAddLevel(auto374CB863_var, "ZergGroundArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "ZergGroundArmorsLevel2", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "ZergGroundArmorsLevel3", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "ZergFlyerArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "ZergFlyerArmorsLevel2", 1);
            TechTreeUpgradeAddLevel(auto374CB863_var, "ZergFlyerArmorsLevel3", 1);
        }
        else {
        }
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_394B321C_8D5615CD"));
    return true;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: UG | Launch
//--------------------------------------------------------------------------------------------------
bool lib394B321C_gt_UGLaunch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3041E761_g;
    int auto3041E761_u;
    unit auto3041E761_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(lib394B321C_gt_UGWriteUpgrades, true, false);
    if ((GameAttributeGameValue("1") == "0002")) {
        lib394B321C_gv_uGisMaxUnitEnergy = true;
        auto3041E761_g = UnitGroup("Nexus", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto3041E761_u = UnitGroupCount(auto3041E761_g, c_unitCountAll);
        for (;; auto3041E761_u -= 1) {
            auto3041E761_var = UnitGroupUnitFromEnd(auto3041E761_g, auto3041E761_u);
            if (auto3041E761_var == null) { break; }
            UnitSetPropertyFixed(auto3041E761_var, c_unitPropEnergyPercent, 100.0);
        }
    }

    if ((GameAttributeGameValue("3") == "0002")) {
        lib394B321C_gv_uGisFastUpgradeLearning = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib394B321C_gt_UGLaunch_Init () {
    lib394B321C_gt_UGLaunch = TriggerCreate("lib394B321C_gt_UGLaunch_Func");
    TriggerAddEventMapInit(lib394B321C_gt_UGLaunch);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UG | WriteUpgrades
//--------------------------------------------------------------------------------------------------
bool lib394B321C_gt_UGWriteUpgrades_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__countAllUpgades;
    int lv__countProtossUpgades;
    int lv__countTerranUpgades;
    int lv__countZergUpgades;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__countAllUpgades = 1;
    lv__countProtossUpgades = 1;
    lv__countTerranUpgades = 1;
    lv__countZergUpgades = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("WarpGateResearch");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[1][lv__countProtossUpgades] = ("WarpGateResearch");
    lv__countProtossUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("Charge");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[1][lv__countProtossUpgades] = ("Charge");
    lv__countProtossUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("BlinkTech");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[1][lv__countProtossUpgades] = ("BlinkTech");
    lv__countProtossUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("AdeptPiercingAttack");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[1][lv__countProtossUpgades] = ("AdeptPiercingAttack");
    lv__countProtossUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("PsiStormTech");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[1][lv__countProtossUpgades] = ("PsiStormTech");
    lv__countProtossUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("DarkTemplarBlinkUpgrade");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[1][lv__countProtossUpgades] = ("DarkTemplarBlinkUpgrade");
    lv__countProtossUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("ObserverGraviticBooster");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[1][lv__countProtossUpgades] = ("ObserverGraviticBooster");
    lv__countProtossUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("GraviticDrive");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[1][lv__countProtossUpgades] = ("GraviticDrive");
    lv__countProtossUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("ExtendedThermalLance");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[1][lv__countProtossUpgades] = ("ExtendedThermalLance");
    lv__countProtossUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("PhoenixRangeUpgrade");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[1][lv__countProtossUpgades] = ("PhoenixRangeUpgrade");
    lv__countProtossUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("VoidRaySpeedUpgrade");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[1][lv__countProtossUpgades] = ("VoidRaySpeedUpgrade");
    lv__countProtossUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("TempestGroundAttackUpgrade");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[1][lv__countProtossUpgades] = ("TempestGroundAttackUpgrade");
    lv__countProtossUpgades += 1;

    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("ShieldWall");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[2][lv__countTerranUpgades] = ("ShieldWall");
    lv__countTerranUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("Stimpack");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[2][lv__countTerranUpgades] = ("Stimpack");
    lv__countTerranUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("PunisherGrenades");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[2][lv__countTerranUpgades] = ("PunisherGrenades");
    lv__countTerranUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("PersonalCloaking");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[2][lv__countTerranUpgades] = ("PersonalCloaking");
    lv__countTerranUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("HighCapacityBarrels");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[2][lv__countTerranUpgades] = ("HighCapacityBarrels");
    lv__countTerranUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("HurricaneThrusters");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[2][lv__countTerranUpgades] = ("HurricaneThrusters");
    lv__countTerranUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("DrillClaws");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[2][lv__countTerranUpgades] = ("DrillClaws");
    lv__countTerranUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("SmartServos");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[2][lv__countTerranUpgades] = ("SmartServos");
    lv__countTerranUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("InterferenceMatrix");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[2][lv__countTerranUpgades] = ("InterferenceMatrix");
    lv__countTerranUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("BansheeCloak");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[2][lv__countTerranUpgades] = ("BansheeCloak");
    lv__countTerranUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("BansheeSpeed");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[2][lv__countTerranUpgades] = ("BansheeSpeed");
    lv__countTerranUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("BattlecruiserEnableSpecializations");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[2][lv__countTerranUpgades] = ("BattlecruiserEnableSpecializations");
    lv__countTerranUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("MedivacCaduceusReactor");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[2][lv__countTerranUpgades] = ("MedivacCaduceusReactor");
    lv__countTerranUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("LiberatorAGRangeUpgrade");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[2][lv__countTerranUpgades] = ("LiberatorAGRangeUpgrade");
    lv__countTerranUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("HiSecAutoTracking");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[2][lv__countTerranUpgades] = ("HiSecAutoTracking");
    lv__countTerranUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("TerranBuildingArmor");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[2][lv__countTerranUpgades] = ("TerranBuildingArmor");
    lv__countTerranUpgades += 1;

    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("zerglingmovementspeed");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[3][lv__countZergUpgades] = ("zerglingmovementspeed");
    lv__countZergUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("zerglingattackspeed");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[3][lv__countZergUpgades] = ("zerglingattackspeed");
    lv__countZergUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("CentrificalHooks");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[3][lv__countZergUpgades] = ("CentrificalHooks");
    lv__countZergUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("GlialReconstitution");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[3][lv__countZergUpgades] = ("GlialReconstitution");
    lv__countZergUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("TunnelingClaws");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[3][lv__countZergUpgades] = ("TunnelingClaws");
    lv__countZergUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("overlordspeed");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[3][lv__countZergUpgades] = ("overlordspeed");
    lv__countZergUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("Burrow");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[3][lv__countZergUpgades] = ("Burrow");
    lv__countZergUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("EvolveGroovedSpines");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[3][lv__countZergUpgades] = ("EvolveGroovedSpines");
    lv__countZergUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("EvolveMuscularAugments");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[3][lv__countZergUpgades] = ("EvolveMuscularAugments");
    lv__countZergUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("DiggingClaws");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[3][lv__countZergUpgades] = ("DiggingClaws");
    lv__countZergUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("LurkerRange");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[3][lv__countZergUpgades] = ("LurkerRange");
    lv__countZergUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("NeuralParasite");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[3][lv__countZergUpgades] = ("NeuralParasite");
    lv__countZergUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("ChitinousPlating");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[3][lv__countZergUpgades] = ("ChitinousPlating");
    lv__countZergUpgades += 1;
    lib394B321C_gv_uGupgradesArray[lv__countAllUpgades] = ("AnabolicSynthesis");
    lv__countAllUpgades += 1;
    lib394B321C_gv_uGupgradesArrayOfRace[3][lv__countZergUpgades] = ("AnabolicSynthesis");
    lv__countZergUpgades += 1;

    lv__countAllUpgades -= 1;
    lv__countProtossUpgades -= 1;
    lv__countTerranUpgades -= 1;
    lv__countZergUpgades -= 1;
    if (((lib394B321C_gv_uGupgradesAmount == lv__countAllUpgades) && (lib394B321C_gv_uGprotossUpgradesAmount == lv__countProtossUpgades) && (lib394B321C_gv_uGterranUpgradesAmount == lv__countTerranUpgades) && (lib394B321C_gv_uGzergUpgradesAmount == lv__countZergUpgades) && (lv__countAllUpgades == (lv__countProtossUpgades + lv__countTerranUpgades + lv__countZergUpgades)))) {
        TextExpressionSetToken("Param/Expression/lib_394B321C_4D9E8D55", "_countUpgrades", IntToText(lv__countAllUpgades));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_394B321C_4D9E8D55"));
        if ((GameAttributeGameValue("2") == "0002")) {
            lib394B321C_gf_UGAllowAddUpgrades_1();
        }

        lib394B321C_gf_UGAllowAddUpgrades_2();
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_394B321C_289F1771", "_countUpgrades", IntToText(lv__countAllUpgades));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_394B321C_289F1771"));
        TextExpressionSetToken("Param/Expression/lib_394B321C_76CF6E89", "_countUpgrades", IntToText(lv__countAllUpgades));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_394B321C_76CF6E89"));
        TextExpressionSetToken("Param/Expression/lib_394B321C_DD0FD246", "_countUpgrades", IntToText(lv__countAllUpgades));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_394B321C_DD0FD246"));
        TextExpressionSetToken("Param/Expression/lib_394B321C_C41ED751", "_countUpgrades", IntToText(lv__countAllUpgades));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_394B321C_C41ED751"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib394B321C_gt_UGWriteUpgrades_Init () {
    lib394B321C_gt_UGWriteUpgrades = TriggerCreate("lib394B321C_gt_UGWriteUpgrades_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UG | SetMaxEnergy
//--------------------------------------------------------------------------------------------------
bool lib394B321C_gt_UGSetMaxEnergy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv__unitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__unitType = UnitGetType(EventUnit());

    // Conditions
    if (testConds) {
        if (!((lib394B321C_gv_uGisMaxUnitEnergy == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib394B321C_gf_DoesUnitTypeHaveEnergy(lv__unitType) == true)) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, 100.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib394B321C_gt_UGSetMaxEnergy_Init () {
    lib394B321C_gt_UGSetMaxEnergy = TriggerCreate("lib394B321C_gt_UGSetMaxEnergy_Func");
    TriggerAddEventUnitRegion(lib394B321C_gt_UGSetMaxEnergy, null, RegionEntireMap(), true);
    TriggerAddEventUnitAbility(lib394B321C_gt_UGSetMaxEnergy, null, AbilityCommand("MorphToOverseer", 0), c_abilMorphStageAbilsEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UG | StartUpgradeLeaning
//--------------------------------------------------------------------------------------------------
bool lib394B321C_gt_UGStartUpgradeLeaning_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib394B321C_gv_uGisFastUpgradeLearning == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 100);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib394B321C_gt_UGStartUpgradeLeaning_Init () {
    lib394B321C_gt_UGStartUpgradeLeaning = TriggerCreate("lib394B321C_gt_UGStartUpgradeLeaning_Func");
    TriggerAddEventUnitResearchProgress(lib394B321C_gt_UGStartUpgradeLeaning, null, c_unitProgressStageStart);
}

void lib394B321C_InitTriggers () {
    lib394B321C_gt_UGLaunch_Init();
    lib394B321C_gt_UGWriteUpgrades_Init();
    lib394B321C_gt_UGSetMaxEnergy_Init();
    lib394B321C_gt_UGStartUpgradeLeaning_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib394B321C_InitLib_completed = false;

void lib394B321C_InitLib () {
    if (lib394B321C_InitLib_completed) {
        return;
    }

    lib394B321C_InitLib_completed = true;

    lib394B321C_InitLibraries();
    lib394B321C_InitVariables();
    lib394B321C_InitTriggers();
}

